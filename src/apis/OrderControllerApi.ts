/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrderConfirmation,
    OrderConfirmationFromJSON,
    OrderConfirmationToJSON,
    OrderDetail,
    OrderDetailFromJSON,
    OrderDetailToJSON,
    OrderDto,
    OrderDtoFromJSON,
    OrderDtoToJSON,
    OrderUpdateDto,
    OrderUpdateDtoFromJSON,
    OrderUpdateDtoToJSON,
} from '../models';

export interface GetOrderUsingGETRequest {
    id: string;
}

export interface GetOrdersUsingGETRequest {
    status?: GetOrdersUsingGETStatusEnum;
}

export interface OrderUsingPOSTRequest {
    orderDto: OrderDto;
}

export interface UpdateOrderUsingPUTRequest {
    id: string;
    orderDto: OrderUpdateDto;
}

/**
 * no description
 */
export class OrderControllerApi extends runtime.BaseAPI {

    /**
     * getOrder
     */
    async getOrderUsingGETRaw(requestParameters: GetOrderUsingGETRequest): Promise<runtime.ApiResponse<OrderDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDetailFromJSON(jsonValue));
    }

    /**
     * getOrder
     */
    async getOrderUsingGET(requestParameters: GetOrderUsingGETRequest): Promise<OrderDetail> {
        const response = await this.getOrderUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getOrders
     */
    async getOrdersUsingGETRaw(requestParameters: GetOrdersUsingGETRequest): Promise<runtime.ApiResponse<Array<OrderDetail>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderDetailFromJSON));
    }

    /**
     * getOrders
     */
    async getOrdersUsingGET(requestParameters: GetOrdersUsingGETRequest): Promise<Array<OrderDetail>> {
        const response = await this.getOrdersUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * order
     */
    async orderUsingPOSTRaw(requestParameters: OrderUsingPOSTRequest): Promise<runtime.ApiResponse<OrderConfirmation>> {
        if (requestParameters.orderDto === null || requestParameters.orderDto === undefined) {
            throw new runtime.RequiredError('orderDto','Required parameter requestParameters.orderDto was null or undefined when calling orderUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderDtoToJSON(requestParameters.orderDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderConfirmationFromJSON(jsonValue));
    }

    /**
     * order
     */
    async orderUsingPOST(requestParameters: OrderUsingPOSTRequest): Promise<OrderConfirmation> {
        const response = await this.orderUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateOrder
     */
    async updateOrderUsingPUTRaw(requestParameters: UpdateOrderUsingPUTRequest): Promise<runtime.ApiResponse<OrderDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrderUsingPUT.');
        }

        if (requestParameters.orderDto === null || requestParameters.orderDto === undefined) {
            throw new runtime.RequiredError('orderDto','Required parameter requestParameters.orderDto was null or undefined when calling updateOrderUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateDtoToJSON(requestParameters.orderDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDetailFromJSON(jsonValue));
    }

    /**
     * updateOrder
     */
    async updateOrderUsingPUT(requestParameters: UpdateOrderUsingPUTRequest): Promise<OrderDetail> {
        const response = await this.updateOrderUsingPUTRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetOrdersUsingGETStatusEnum {
    REGISTERED = 'REGISTERED',
    COOKING = 'COOKING',
    OTW = 'OTW',
    DELIVERED = 'DELIVERED'
}
